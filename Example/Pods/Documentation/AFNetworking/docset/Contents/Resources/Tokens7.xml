<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFURLConnectionOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFURLConnectionOperation</TokenIdentifier>
			<Abstract type="html">AFURLConnectionOperation is a subclass of NSOperation that implements NSURLConnection delegate methods.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setRunLoopModes:</TokenIdentifier>
			<Abstract type="html">The run loop modes in which the operation will run on the network thread. By default, this is a single-member set containing NSRunLoopCommonModes.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSSet *runLoopModes</Declaration>
			
			
			<Anchor>//api/name/runLoopModes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/runLoopModes</TokenIdentifier>
			<Abstract type="html">The run loop modes in which the operation will run on the network thread. By default, this is a single-member set containing NSRunLoopCommonModes.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSSet *runLoopModes</Declaration>
			
			
			<Anchor>//api/name/runLoopModes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setRequest:</TokenIdentifier>
			<Abstract type="html">The request used by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLRequest *request</Declaration>
			
			
			<Anchor>//api/name/request</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/request</TokenIdentifier>
			<Abstract type="html">The request used by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLRequest *request</Declaration>
			
			
			<Anchor>//api/name/request</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setResponse:</TokenIdentifier>
			<Abstract type="html">The last response received by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/response</TokenIdentifier>
			<Abstract type="html">The last response received by the operation&apos;s connection.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setError:</TokenIdentifier>
			<Abstract type="html">The error, if any, that occurred in the lifecycle of the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/error</TokenIdentifier>
			<Abstract type="html">The error, if any, that occurred in the lifecycle of the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setResponseData:</TokenIdentifier>
			<Abstract type="html">The data received during the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSData *responseData</Declaration>
			
			
			<Anchor>//api/name/responseData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/responseData</TokenIdentifier>
			<Abstract type="html">The data received during the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) NSData *responseData</Declaration>
			
			
			<Anchor>//api/name/responseData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setResponseString:</TokenIdentifier>
			<Abstract type="html">The string representation of the response data.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, copy) NSString *responseString</Declaration>
			
			
			<Anchor>//api/name/responseString</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/responseString</TokenIdentifier>
			<Abstract type="html">The string representation of the response data.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, copy) NSString *responseString</Declaration>
			
			
			<Anchor>//api/name/responseString</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setResponseStringEncoding:</TokenIdentifier>
			<Abstract type="html">The string encoding of the response.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, assign) NSStringEncoding responseStringEncoding</Declaration>
			
			
			<Anchor>//api/name/responseStringEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/responseStringEncoding</TokenIdentifier>
			<Abstract type="html">The string encoding of the response.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, assign) NSStringEncoding responseStringEncoding</Declaration>
			
			
			<Anchor>//api/name/responseStringEncoding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setShouldUseCredentialStorage:</TokenIdentifier>
			<Abstract type="html">Whether the URL connection should consult the credential storage for authenticating the connection. YES by default.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL shouldUseCredentialStorage</Declaration>
			
			
			<Anchor>//api/name/shouldUseCredentialStorage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/shouldUseCredentialStorage</TokenIdentifier>
			<Abstract type="html">Whether the URL connection should consult the credential storage for authenticating the connection. YES by default.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL shouldUseCredentialStorage</Declaration>
			
			
			<Anchor>//api/name/shouldUseCredentialStorage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setCredential:</TokenIdentifier>
			<Abstract type="html">The credential used for authentication challenges in -connection:didReceiveAuthenticationChallenge:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSURLCredential *credential</Declaration>
			
			
			<Anchor>//api/name/credential</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/credential</TokenIdentifier>
			<Abstract type="html">The credential used for authentication challenges in -connection:didReceiveAuthenticationChallenge:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSURLCredential *credential</Declaration>
			
			
			<Anchor>//api/name/credential</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setSSLPinningMode:</TokenIdentifier>
			<Abstract type="html">The pinning mode which will be used for SSL connections. AFSSLPinningModePublicKey by default.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) AFURLConnectionOperationSSLPinningMode SSLPinningMode</Declaration>
			
			
			<Anchor>//api/name/SSLPinningMode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/SSLPinningMode</TokenIdentifier>
			<Abstract type="html">The pinning mode which will be used for SSL connections. AFSSLPinningModePublicKey by default.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) AFURLConnectionOperationSSLPinningMode SSLPinningMode</Declaration>
			
			
			<Anchor>//api/name/SSLPinningMode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setInputStream:</TokenIdentifier>
			<Abstract type="html">The input stream used to read data to be sent during the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSInputStream *inputStream</Declaration>
			
			
			<Anchor>//api/name/inputStream</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/inputStream</TokenIdentifier>
			<Abstract type="html">The input stream used to read data to be sent during the request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSInputStream *inputStream</Declaration>
			
			
			<Anchor>//api/name/inputStream</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setOutputStream:</TokenIdentifier>
			<Abstract type="html">The output stream that is used to write data received until the request is finished.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOutputStream *outputStream</Declaration>
			
			
			<Anchor>//api/name/outputStream</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/outputStream</TokenIdentifier>
			<Abstract type="html">The output stream that is used to write data received until the request is finished.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOutputStream *outputStream</Declaration>
			
			
			<Anchor>//api/name/outputStream</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setUserInfo:</TokenIdentifier>
			<Abstract type="html">The user info dictionary for the receiver.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *userInfo</Declaration>
			
			
			<Anchor>//api/name/userInfo</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLConnectionOperation/userInfo</TokenIdentifier>
			<Abstract type="html">The user info dictionary for the receiver.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *userInfo</Declaration>
			
			
			<Anchor>//api/name/userInfo</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/initWithRequest:</TokenIdentifier>
			<Abstract type="html">Initializes and returns a newly allocated operation object with a url connection configured with the specified url request.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (id)initWithRequest:(NSURLRequest *)urlRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request object to be used by the operation connection.

@discussion This is the designated initializer.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRequest:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/pause</TokenIdentifier>
			<Abstract type="html">Pauses the execution of the request operation.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/isPaused</TokenIdentifier>
			<Abstract type="html">Whether the request operation is currently paused.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isPaused</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the operation is currently paused, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/isPaused</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/resume</TokenIdentifier>
			<Abstract type="html">Resumes the execution of the paused request operation.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)resume</Declaration>
			
			
			<Anchor>//api/name/resume</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setShouldExecuteAsBackgroundTaskWithExpirationHandler:</TokenIdentifier>
			<Abstract type="html">Specifies that the operation should continue execution after the app has entered the background, and the expiration handler for that background task.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setShouldExecuteAsBackgroundTaskWithExpirationHandler:(void ( ^ ) ( void ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">A handler to be called shortly before the application’s remaining background time reaches 0. The handler is wrapped in a block that cancels the operation, and cleans up and marks the end of execution, unlike the handler parameter in UIApplication -beginBackgroundTaskWithExpirationHandler:, which expects this to be done in the handler itself. The handler is called synchronously on the main thread, thus blocking the application’s suspension momentarily while the application is notified.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setShouldExecuteAsBackgroundTaskWithExpirationHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setUploadProgressBlock:</TokenIdentifier>
			<Abstract type="html">Sets a callback to be called when an undetermined number of bytes have been uploaded to the server.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setUploadProgressBlock:(void ( ^ ) ( NSUInteger bytesWritten , long long totalBytesWritten , long long totalBytesExpectedToWrite ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes three arguments: the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUploadProgressBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setDownloadProgressBlock:</TokenIdentifier>
			<Abstract type="html">Sets a callback to be called when an undetermined number of bytes have been downloaded from the server.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setDownloadProgressBlock:(void ( ^ ) ( NSUInteger bytesRead , long long totalBytesRead , long long totalBytesExpectedToRead ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the NSHTTPURLResponse object. This block may be called multiple times, and will execute on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDownloadProgressBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setAuthenticationAgainstProtectionSpaceBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed to determine whether the connection should be able to respond to a protection space&apos;s form of authentication, as handled by the NSURLConnectionDelegate method connection:canAuthenticateAgainstProtectionSpace:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setAuthenticationAgainstProtectionSpaceBlock:(BOOL ( ^ ) ( NSURLConnection *connection , NSURLProtectionSpace *protectionSpace ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed to determine whether the connection should be able to respond to a protection space&apos;s form of authentication. The block has a BOOL return type and takes two arguments: the URL connection object, and the protection space to authenticate against.

@discussion If AFNETWORKINGALLOWINVALIDSSLCERTIFICATES is defined, connection:canAuthenticateAgainstProtectionSpace: will accept invalid SSL certificates, returning YES if the protection space authentication method is NSURLAuthenticationMethodServerTrust.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAuthenticationAgainstProtectionSpaceBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setAuthenticationChallengeBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when the connection must authenticate a challenge in order to download its request, as handled by the NSURLConnectionDelegate method connection:didReceiveAuthenticationChallenge:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setAuthenticationChallengeBlock:(void ( ^ ) ( NSURLConnection *connection , NSURLAuthenticationChallenge *challenge ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when the connection must authenticate a challenge in order to download its request. The block has no return type and takes two arguments: the URL connection object, and the challenge that must be authenticated.

@discussion If AFNETWORKINGALLOWINVALIDSSLCERTIFICATES is defined, connection:didReceiveAuthenticationChallenge: will attempt to have the challenge sender use credentials with invalid SSL certificates.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAuthenticationChallengeBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setRedirectResponseBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when the server redirects the request from one URL to another URL, or when the request URL changed by the NSURLProtocol subclass handling the request in order to standardize its format, as handled by the NSURLConnectionDelegate method connection:willSendRequest:redirectResponse:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setRedirectResponseBlock:(NSURLRequest *( ^ ) ( NSURLConnection *connection , NSURLRequest *request , NSURLResponse *redirectResponse ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when the request URL was changed. The block returns an NSURLRequest object, the URL request to redirect, and takes three arguments: the URL connection object, the the proposed redirected request, and the URL response that caused the redirect.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setRedirectResponseBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLConnectionOperation/setCacheResponseBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed to modify the response a connection will cache, if any, as handled by the NSURLConnectionDelegate method connection:willCacheResponse:.</Abstract>
			<DeclaredIn>AFURLConnectionOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setCacheResponseBlock:(NSCachedURLResponse *( ^ ) ( NSURLConnection *connection , NSCachedURLResponse *cachedResponse ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed to determine what response a connection will cache, if any. The block returns an NSCachedURLResponse object, the cached response to store in memory or nil to prevent the response from being cached, and takes two arguments: the URL connection object, and the cached response provided for the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCacheResponseBlock:</Anchor>
		</Token>
		
	</File>
</Tokens>